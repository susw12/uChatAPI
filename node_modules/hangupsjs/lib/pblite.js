// Generated by CoffeeScript 1.12.7
(function() {
  var BooleanField, DictField, EnumField, Field, Message, RepeatedField, log;

  log = require('bog');

  require('fnuc').expose(global);

  Field = (function() {
    function Field() {
      if (!(this instanceof Field)) {
        return new Field();
      }
    }

    Field.prototype.parse = function(input) {
      return this.value = input === void 0 ? null : input;
    };

    return Field;

  })();

  BooleanField = (function() {
    function BooleanField() {
      if (!(this instanceof BooleanField)) {
        return new BooleanField();
      }
    }

    BooleanField.prototype.parse = function(input) {
      return this.value = input === void 0 ? false : parseInt(input) === 0 ? false : true;
    };

    return BooleanField;

  })();

  EnumField = (function() {
    function EnumField(enms) {
      if (!(this instanceof EnumField)) {
        return new EnumField(enms);
      }
      this.enms = enms;
    }

    EnumField.prototype.parse = function(input) {
      var k, ref, v;
      ref = this.enms;
      for (k in ref) {
        v = ref[k];
        if (input === v) {
          return k;
        }
      }
      return {};
    };

    return EnumField;

  })();

  DictField = (function() {
    function DictField(dict) {
      if (!(this instanceof DictField)) {
        return new DictField(dict);
      }
      this.dict = dict;
    }

    DictField.prototype.parse = function(input) {
      var error, obj, out, out_prop, out_val, prop, ref, val;
      if (!input) {
        return null;
      }
      if (input === void 0) {
        return null;
      }
      if (input instanceof Buffer) {
        input = input.toString();
      }
      try {
        obj = typeis(input, 'string') ? eval(input) : input;
      } catch (error1) {
        error = error1;
        log.error('Problem with DICT field', input);
        return this.value = input === void 0 ? null : input;
      }
      out = {};
      ref = this.dict;
      for (prop in ref) {
        val = ref[prop];
        out_prop = prop;
        out_val = val;
        if (val.constructor === Array) {
          out_val = val[0];
          if (val.length > 1) {
            out_prop = val[1];
          }
        }
        if (obj[prop]) {
          out[out_prop] = out_val.parse(obj[prop]);
        }
      }
      return out;
    };

    return DictField;

  })();

  RepeatedField = (function() {
    function RepeatedField(field) {
      if (!(this instanceof RepeatedField)) {
        return new RepeatedField(field);
      }
      if (typeof (field != null ? field.parse : void 0) !== 'function') {
        console.trace();
      }
      this.field = field;
    }

    RepeatedField.prototype.parse = function(input) {
      var a, i, len, ref, results;
      if (!input) {
        return input;
      }
      results = [];
      for (i = 0, len = input.length; i < len; i++) {
        a = input[i];
        results.push((ref = this.field) != null ? ref.parse(a) : void 0);
      }
      return results;
    };

    return RepeatedField;

  })();

  Message = (function() {
    function Message(fields) {
      if (!(this instanceof Message)) {
        return new Message(fields);
      }
      this.fields = fields;
    }

    Message.prototype.parse = function(input) {
      var a, i, k, out, ref, v, val;
      if (!input) {
        return null;
      }
      if (input instanceof Buffer) {
        input = input.toString();
      }
      if (typeis(input, 'string')) {
        input = eval(input);
      }
      out = {};
      for (a = i = 0, ref = this.fields.length; i < ref; a = i += 2) {
        val = input[a / 2];
        k = this.fields[a];
        v = this.fields[a + 1];
        if (k) {
          out[k] = v.parse(val);
        }
      }
      return out;
    };

    return Message;

  })();

  module.exports = {
    Field: Field,
    BooleanField: BooleanField,
    EnumField: EnumField,
    DictField: DictField,
    RepeatedField: RepeatedField,
    Message: Message
  };

}).call(this);
